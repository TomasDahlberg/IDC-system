* sysgon.a  1993-04-14 TD,  version 1.2
*
* This file contains proprietary information of IVT Electronic AB.
* Copying or reproduction without prior written approval is prohibited.
*
* This file is furnished under a license agreement or nondisclosure
* agreement. The software may be used or copied only in accordance 
* with the terms of the agreement.
*
* In no event will IVT Electronic AB, be liable for any lost revenue or
* profits or other special, indirect and consequential damages, even if
* IVT has been advised of the possibility of such damages.
*
* IVT Electronic AB
* Box 996
* 191 29 Sollentuna
* Sweden
*

*
* sysgon.a
* Copyright (C) 1991-1993, IVT Electronic AB.
*


* File      :     sysgon.a
* Function  :     Initial process declared in init-module
* Notes     :     Updates system clock regulary (every 9:th hour)
*
* History:
* date    rev   who   what
* ------  ----  ---   ---------------------------------------------
* 920205  1.00        Wrote code
* 930406  1.10  TD    Gets interrupt from an alarm twice a second and after
*                     32768 interrupts (9 hours) we'll update the system clock
* 930414  1.20  TD    Added clearing of offset, lockOffset
*
*

edition	 equ	  5
type     set      (1<<8)+1 
revs     set      (128<<8)+7
         psect    sysgo,type,revs,edition,0,main

*        use ../sysvars.a

	vsect
counter ds.w    1        
	ds.b	128
	ends

icp     addq.b  #1,counter(a6)
        bne.s   notYet                  every 3:rd hour = 2:50:40
        moveq   #0,d0                   *was: every 32768 sec = 9 hour (09:06:08)*
        moveq   #0,d1
        os9     F$STime                 update system time from RTC
notYet	os9	F$RTE			return from intercept

main:
	lea.l	icp(pc),a0		get pointer to intecept handler and
	os9	F$Icpt			set up an intercept handler

        movea   #SYS$SYSTEM_AREA,a0     added 930414
        move.l  #0,SYS$offset(a0)       
        move.b  #0,SYS$tid_lockOffset(a0)


noSetUp2
	moveq.l	#0,d0
	move.w	#A$Cycle,d1
	move.l	#257,d2			function code
	move.l	#$80002800,d3		every 40:th second
	
	os9	F$Alarm


	cmpi.w	#$c0de,$440		check if any ipl-string
	bne.s	noIpl			no startup string, just start shell
	move.l	#$442,a1		start of string
	moveq.l	#0,d2			start length
	move.l	a1,a0			take a copy
count	addq.w	#1,d2			and check 
	cmpi.b	#$0d,(a0)+		size of ipl string
	bne.s	count			
	bra.s	ner

noIpl	
doShell	lea.l	param(pc),a1		no parameter, use <CR>
	moveq.l	#1,d2			size of parameter (just <CR>)
ner	moveq.l	#0,d0			any type module
	moveq.l	#0,d1			no additional memory
	moveq.l #3,d3			copy stdin, stdout & stderr, three 
	moveq.l	#0,d4			same priority
	lea.l	shell(pc),a0		shell name
	os9	F$Fork			fork shell
	bcs.s	error			returned error
wait	os9	F$Wait			wait for shell to terminate
	bcs.s	error			we had no children, show E$NoChld (?)

	tst.w   d0			any terminating, or just signal
	beq.s   wait

	tst.w	d1			check exit status from shell
	beq.s	doShell			no, spawn another shell

*	moveq.l	#19,d1

error	moveq.l	#0,d0			no error message path number
	os9	F$PErr			report error message
	bra.s	doShell			spawn a new shell

error1  moveq.l	#17,d1
	bra.s	error

error2  moveq.l	#18,d1
	bra.s	error



hparam	dc.b	13			default parameter, none

shell	dc.b	"Shell",0
param	dc.b	13			default parameter, none

strunt	dc.b	"/term",0



