/**************************************************************************/
/* File:        SENDMOD.C      Type: P  (mainProgram/Module/Include)      */
/* By:          Dan Axelsson                                              */
/* Description:	Program to download a module to DT-08                     */
/*              Program RECMOD must reside in DT08 module directory       */
/*              and a shell must be running on the communication port     */
/* Use:         SENDMOD binfilename [adressDT08] [/2]                     */
/*                 binfilename  filname for binaryfile to be transfered   */
/*                 optional: DT08 loadaddress, default is first free      */
/*                 optional: use COM2 for transfer, default is COM1       */
/* ---------------------  History  -------------------------------------  */
/*   Date     /   What                                                    */
/* ...................................................................... */
/* 91-03-16   /   started                                                 */
/* 91-09-15   /   number of blocks greater than 256 now supported         */
/* 91-09-15   /   updated                                                 */
/**************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
/*
#include <bprint.h>
*/
#include "asynch_1.h"
#include "support.h"	       /* Support functions	  */
#include "dtproto.h"

#define BREAKCH  0x03   /* ^C */
#define OS9_PROMPT '$'
#define MAX_TRIAL 10

#define  BLANK    32
#define  LINEFEED 10
#define  ENTER	  13
#define  BACKSP    8
#define  ESCAPE   27
#define  F1	  59
#define  F2	  60
#define  F10      68
#define  BAR	 205
#define  NULBYTE '\0'
#define  ETX	 '\003'
#define  EOT	 '\004'
#define  PROMPT  '>'
#define  NORMAL    7

#define  TRUE	 -1
#define  FALSE	 0

/*  Prototypes  */
int init_com(int);
void belldn(void);
void bellup(void);
void disp_help(void);
void disp_desc(void);
void disp_use(void);
int connect_dt08(int);
int start_recmod();

void main(int, char **);
int wr_ch(char);
int rd_ch(void);
void init_ports(void);
void errmsg(char *,int,unsigned);
/*int prinit(int);     /* macros */
/*int prchar(int, char);         */
/*int prstatus(int);             */

char versionst[] = "SENDMOD Version 1.2";
char line[81];			       /* Text line to be output  */
char st[81];
char *ibuffer,*obuffer;                /* Communication queues    */
int  in_row  = 6;		       /* Current row number of   */
int  in_col  = 3;		       /* the incoming messages.  */
int  out_row = 16;
int  out_col = 3;
int  in_port, out_port, port;
int baudopt;
FILE *fin;

#include "dtproto.c"

void bellup()
  {
  int i;
  for (i=400; i< 1600; i+=400)
    {
    sound(i);
    delay(100);
    }
  nosound();
  }

void belldn()
  {
  int i;
  for (i=1600; i>100; i-=400)
    {
    sound(i);
    delay(20);
    }
  delay(100);
  nosound();
  }

#if 0
void prs(port,st)
int port;    /* LPT port number 0 or 1 */
char *st;
  {
  while (*st)
    prchar(port, *st++);
  }
#endif

/* WR_CH  Write a character to the output queue        */
/* returns 0 if OK, otherwise ER_WRITE */
int wr_ch(ch)
char ch;
  {
     int ercode;
     while ((ercode = wrtch_a1(out_port,ch)) == OUT_Q_FULL);
     if (ercode != 0)
	  {
	  errmsg("Cannot write to the output queue (wrtch_a1).",ercode,0);
	  return(ER_WRITE);
	  }
       else return(0);
  }

/* returns 0 if OK, otherwise ER_WRITE */
int wr_st(str)
char *str;
  {
  int stat;
  stat=0;
  while (*str && (stat==0))
    stat= wr_ch(*str++);
  return(stat);
  }

/* returns 0 if OK, otherwise ER_WRITE */
int wr_blk(nof)
int nof;
  {
  int stat;
  unsigned char *pblk;
  pblk= &wblk.start;
  stat=0;
  while ((nof-- > 0) && (stat==0))
    stat= wr_ch(*pblk++);
  return(stat);
  }

/* assemble and send block, don't wait for respons */
/* type: packet type */
/* pstr: pointer to null terminated string */
/* returns error from wr_blk() */
int as_blk(type, pstr)
char type;
char *pstr;
  {
  wblk.type= type;
  strcpy(&wblk.data[0], pstr);
  return(wr_blk(asm_blk(strlen(&wblk.type))));
  }


/* RD_CH  Read a character from the input queue.   */
/* Character is returned, if empty or error -1 is returned  */
/* the character (or instruction) is echoed in the receive window.*/

int rd_ch()
  {
  int ercode,iqsize;
  unsigned status;
  unsigned char ch;

  ercode = rdch_a1(in_port,&ch,&iqsize,&status);
  if (status & 0x00ff)
      errmsg("Error accessing the input queue (rdch_a1).",0,status);
  if (ercode == IN_Q_EMPTY)          /* Nothing is in queue	  */
      return(-1);
  switch (ercode)
    {
    case 0:			       /* Character received	  */
      return(ch);
    default:
      errmsg("Error reading input port (rdbk_a1).",ercode,status);
      return (ER_READ);
    }
  }

/* COMPORT_INIT  Initialize the COM port(s).             */

int init_com(port)
int port;
  {
  int	ercode,baud_rate,data_bits,parity,stop_bits;
  static char *pbaud[] =
    {"110","150","300","600","1200","2400","4800","9600","19200"};
  static char *pparity[] = {"No","Odd","Even"};
  static char *pdata[]   = {"Five","Six","Seven","Eight"};
  static char *pstop[]   = {"One","Two"};

/*   scdspmsg(2,26,15,0,"I N I T I A L I Z A T I O N");
*/   ercode = -1;
   while (ercode)
   {
/*      scscroll(4,0,24,79,0,NORMAL);
      sccurset(4,0);
      sccursor(0,12,13);  */
/*      in_port   = aprdnum("    Receiving Port");
      out_port  = aprdnum(" Transmission Port");  */
      in_port= port;
      out_port= port;
      if ((ibuffer = malloc(16384)) == NIL)
	 errmsg("Cannot allocate space for input buffer.",0,0);
      if ((ercode = open_a1(in_port,15250,1024,0,0,ibuffer)) != 0)
	 errmsg("Cannot open input port.",ercode,0);
      if (in_port != out_port)
      {
	 if ((obuffer = malloc(260)) == NIL)
	    errmsg("Cannot allocate space for output buffer.",0,0);
	 if ((ercode = open_a1(out_port,128,128,0,0,obuffer)) != 0)
	    errmsg("Cannot open output port.",ercode,0);
      }
   }
   ercode = -1;
   while (ercode)
   {
/*      printf(" BAUD Rate   110  150  300  600 1200 2400 4800 9600 19200\n");
      printf(" Code          0    1    2    3    4    5    6    7     8\n");
      baud_rate = aprdnum("         BAUD Rate");
*/
      if (baudopt)
	  baud_rate= baudopt;
	else
	  baud_rate = 7;    /* default 9600 */
      if ((ercode = setop_a1(in_port,1,baud_rate)) != 0)
	 errmsg("Cannot set BAUD rate for the input port.",ercode,0);
/*      else if ((ercode = setop_a1(out_port,1,baud_rate)) != 0)
	 errmsg("Cannot set BAUD rate for the output port.",ercode,0);
*/   }
   ercode = -1;
   while (ercode)
   {
/*      printf(" Parity      None  Odd   Even\n");
      printf(" Code          0    1      2\n");
      parity	= aprdnum("            Parity");
*/     parity= 0;
     if ((ercode = setop_a1(in_port,2,parity)) != 0)
	 errmsg("Cannot set Parity for the input port.",ercode,0);
/*      else if ((ercode = setop_a1(out_port,2,parity)) != 0)
	 errmsg("Cannot set Parity for the output port.",ercode,0);
*/   }
   ercode = -1;
   while (ercode)
   {
/*      printf(" Data bits     5    6    7    8\n");
      printf(" Code          0    1    2    3\n");
      data_bits = aprdnum("         Data bits");
*/   data_bits = 3;
   if ((ercode = setop_a1(in_port,3,data_bits)) != 0)
	 errmsg("Cannot set Data Bits for the input port.",ercode,0);
/*      else if ((ercode = setop_a1(out_port,3,data_bits)) != 0)
	 errmsg("Cannot set Data Bits for the output port.",ercode,0);
*/   }
   ercode = -1;
   while (ercode)
   {
/*      printf(" Stop bits     1    2\n");
      printf(" Code          0    1\n");
       stop_bits = aprdnum("         Stop bits");
*/   stop_bits= 0;
      if ((ercode = setop_a1(in_port,4,stop_bits)) != 0)
	 errmsg("Cannot set Stop Bits for the input port.",
						       ercode,0);
/*      else if ((ercode = setop_a1(out_port,4,stop_bits)) != 0)
	 errmsg("Cannot set Stop Bits for the output port.",
						       ercode,0);
*/   }
   if ((ercode = setop_a1(out_port,9,0)) != 0)
      errmsg("Cannot remove requirement for CTS",0,0);
/*   if ((ercode = setop_a1(out_port,5,1)) != 0)
      errmsg("Cannot enable remote Flow Control (XON/XOFF)",0,0);
*/
   printf(" Communication port COM%d\n", out_port);
   printf(" BAUD rate is %s    %s parity    %s data bits    %s stop bit(s)\n",
			    pbaud[baud_rate],pparity[parity],
			    pdata[data_bits],pstop[stop_bits]);
/*   printf(" Transmit flow control with XON/XOFF.   "); */
   printf(" CTS is not required.\n");

   return(0);

}

/* ERRMSG  Display an error message, error code and port status   */
/* if they are nonzero.  The bottom four lines of the transmit	  */
/* window are used to display the error messages.		  */

void errmsg(pmsg,code,status)
char	 *pmsg;
int	 code;
unsigned status;
{

   int row,col,tcur,bcur;
   static char *pcodemsg[] =
	{"Successful",
	 "Reserved for future use",
	 "Invalid COM port number",
	 "COM port is not opened",
	 "Invalid parameter or function value",
	 "Reserved for future use",
	 "No serial port found",
	 "Output queue is full",
	 "Reserved for future use",
	 "COM port is already open",
	 "Input queue is empty"};

   sccurst(&row,&col,&tcur,&bcur);     /* Current cursor position */
   sccursor(1,0,0);		       /* Turn the cursor off	  */
   sccurset(21,0);		       /* Position the cursor,	  */
   printf(" %s\n",pmsg);               /* display the message,    */
   if (code != 0)		       /* and possibly the code.  */
      printf(" Error code - %02d  %s",code,pcodemsg[code]);
   if (status != 0)
      printf(" Port status - %04x",status);
   printf("\n");
/*   utpause("");                        /* Wait for a key to be    */
   sccursor(0,12,13);              /* pressed. Turn the cursor*/
   scscroll(21,0,24,79,0,NORMAL);      /* back on and clear the   */
   sccurset(row,col);		       /* window and go back.	  */

   return;
  }

void disp_help()
  {
  disp_desc();
  disp_use();
  }

void disp_desc()
  {
  printf("SENDMOD program downloads an OS9-module from PC to DT-08\n");
  printf("  Binary data is transfered over the serial line\n");
  printf("  SENDMOD set the lineparameters to 9600,8,1,n and no RTS required\n");
  printf("  Program RECMOD must reside in DT08 module directory\n");
  printf("  and a shell must be running on the DT08 communication port\n");
  printf("\n");
  }

void disp_use()
  {
  printf("Use:  SENDMOD binfilename [adressDT08] [/2] [Bn]\n");
  printf("         binfilename: filname for binary file to be transfered\n");
  printf("         optional: DT08 loadaddress (HEX), default is first free\n");
  printf("         optional: use COM2 for transfer, default is COM1\n");
  printf("         optional: set baudrate n=4(1200)..8(19200), default is 9600\n");
  printf("\nCopyright IVT Electronic AB\n\n");
  }

/* returns 1 if connected otherwise 0 */
int connect_dt08(port)
int port;
  {
  int connected, i, ercode, size;
  unsigned int status;
  char ch;
  connected= 0;
  iflsh_a1(port);            /* flush input queue */
/*  wrtch_a1(port, BREAKCH);   /* send ^C */
  wrtch_a1(port, CR);   /* send CR */
  for (i=0; i< MAX_TRIAL; i++)
    {
    do
      {
      delay(100);    /* sleep .1 seconds */
      ercode= rdch_a1(port, &ch, &size, &status);
      if ((ercode==0) && (ch== OS9_PROMPT))
	  {
	  connected= 1;
	  break;
	  }
      } while (size && !ercode);
    if (connected) break;
    wrtch_a1(port, CR);   /* send a new CR */
    }
  iflsh_a1(port);            /* flush input queue */
  return(connected);
  }


/* returns >0 if RECMOD started, 0 otherwise */
int start_recmod()
  {
  int stat;
  wr_st("RECMOD\r");
  stat= get_blk(rblk);      /* wait for a packet from RECMOD */
  if (stat> 0)
      printf("%s\n", rblk[1]);   /* show message from RECMOD */
  return (stat);
  }

int get_ch()
  {
  int ret;
  long li;
  for (li=0; li<50000; li++)
    {
    if ((ret= rd_ch())>= 0) return (ret);
    if (ret== ER_READ) return (ER_READ);   /* ERROR in read */
/*    delay(1);  */
    }
  return(ER_TIMOUT);    /* timeout */
  }

void pexit()
  {
  close_a1(port);
  fclose(fin);
  exit(0);
  }

void perr_exit()
  {
  printf("Fatal error! Terminating process!\n\n");
  belldn();
  pexit();
  }

void
main(argc,argv)
int argc; char *argv[];
  {
  int i, status, ich, errcnt, type;
  int state, mlen, nakcnt, bcnt, ready;
  unsigned char scan;
  long lcnt, laddr;
  char filn[40];
  int c1;
  long t1, t2;
  int cmpr = 0;

  port= 1;
  lcnt= laddr= 0L;
  errcnt= ready= 0;

  printf("%s\n", versionst);
  if ((argc< 2) || (argc> 5))
      {
      disp_help();
      pexit();
      }

  baudopt= 0;
  for (i=1; i< argc; i++)
    {
 /*   printf("arg %d= %s\n", i, argv[i]);  */
    if (i==1)
	{
	strcpy(filn, argv[i]);
	if (( fin = fopen(filn, "rb") ) == NULL)
	    {
	    printf("File ""%s"" not found\n", filn);
	    pexit();
	    }

	}
      else
	if (argv[i][0] == 'c' || argv[i][0] == 'C')  /* compressed data */
	  cmpr = 1;
      else
	if (argv[i][0] == 'B' || argv[i][0] == 'b')  /* maybe baudrate */
	    if (argv[i][1]> '0' && argv[i][1]< '9')
		baudopt= argv[i][1] - 0x30;
	      else
		{
		printf("*** Select baudrate with value between 1 and 8!\n");
		disp_use();
		pexit(0);
		}
	  else
	if (strlen(argv[i])> 2)  /* maybe adress */
	    {
	    laddr= atol(argv[i]);
	    sscanf(argv[i], "%lx", &laddr);
	    if (laddr< MIN_LOAD_ADDR)
		{
		printf("*** Load address must be in the range (HEX) %lx - maxmem !\n",
			MIN_LOAD_ADDR);
		disp_use();
		pexit(0);
		}
	    }
	  else                   /* maybe comport */
	    {
	    if (argv[i][1]=='2')
		port= 2;
	      else
		{
		printf("*** Use option /2 to activate COM2 !\n");
		disp_use();
		pexit(0);
                }
            }

    }

  if (cmpr)
    printf("Sending compressed data\n");

  if (init_com(port))
      {
      printf("COM%d not available\n", port);
      pexit(0);
      }
  if (!connect_dt08(port))
      {
      belldn();
      printf("***  DT08 not responding!\n");
      printf("***  Check connections and that OS9 Shell is started on communication port!\n");
      pexit(0);
      }
  printf("Connected to DT08\n");
  wr_st("RECMOD\r");  /* starta RECMOD */
/*  if (start_recmod())
      {
      belldn();
      printf("***  Not able to start program RECMOD in DT08!\n");
      printf("***  Check that RECMOD exists in DT08 module directory!\n");
      pexit(0);
      }
 */
  state= INIT;
  t1 = time(0);
  lcnt= 0L;    /* byte count sent */
  do
    {
    mlen= get_blk(rblk);
    if (mlen< 0)
	{
	printf("SENDMOD: %s\n", perrtab[-mlen]);
	if (errcnt++ > MAXERR)
	    {
	    printf("To many errors! Terminating process!\n\n",
		     MAXERR);
	    belldn();
	    pexit();
	    }
	continue;
	}
    errcnt= 0;
    type= rblk[0];
    if (type== PACK)
	nakcnt= 0;
      else
	{
	if (mlen>1)
	    printf("%s\n", &rblk[1]);
	  else
	    printf("NAK received!\n");
	belldn();
	if (nakcnt++ > MAXNAK) perr_exit();
	}
    switch (state)
      {
      case INIT:
	if (type==PACK)
	    {
	    printf("%s\n", &rblk[1]);
	    bellup();  /* be happy */
	if (laddr>= MIN_LOAD_ADDR)
		{
		sprintf(st, "S%lx", laddr);
		as_blk(PCMD,st);   /* set and read load address */
		state= INIT;
		laddr= 0L; /* don't do this again */
		}
	      else
		{
		/* printf("SendFile packet\n"); */
		as_blk(PSEND, "");
		state= SENDINIT;
		}
	    }
	  else
	    perr_exit();
	break;
      case SENDINIT:
	if (type==PACK)
	    {
	    /*  printf("FileHeader packet\n"); */
	    as_blk(PFILEH, filn);
	    state= SENDFILE;
	    }
	  else
	    as_blk(PSEND, "");
	break;
      case SENDFILE:
	if (type==PACK)
	    {
	    state= SENDDATA;
	    as_blk(PDATA, "");  /* dummy data block to get into SENDDATA state */
	    }
	  else
	    as_blk(PFILEH, filn);
	break;
      case SENDDATA:
	if (type== PACK)
	    {
	    bcnt= 0;
	    while ((bcnt< BLK_DATA_MAX) && ((c1 = getc(fin)) != EOF))
	      wblk.data[bcnt++] = (unsigned char) c1;
	    if (c1== EOF) state= SENDEOF;
	    if (bcnt> 0)
		{
		wblk.type= cmpr ? P_CMPR_DATA : PDATA;
		wr_blk(asm_blk(bcnt+1));
		  /* bcnt+1 is length of data and TYPE byte */
		lcnt+= bcnt;
		printf("\r%6ld", lcnt);
		}
	      else
		as_blk(PDATA,"");   /* no data left, send dummy */
	    }
	  else      /* transmitt same data again */
	    wr_blk(asm_blk(bcnt+1)); /* bcnt+1 is length of data and TYPE byte */
	break;
      case SENDEOF:
	if (type== PACK)
	    {
	    printf(" bytes transfered\n");   /* new line from bytecount */
	    state= SENDQUIT;
	    as_blk(PEOF,"");
	    }
	  else     /* error in last data block */
	    {      /* transmitt same data again */
	    if (bcnt> 0)
		wr_blk(asm_blk(bcnt+1));
		  /* bcnt+1 is length of data and TYPE byte */
	      else
		as_blk(PDATA,"");  /* retransmitt dummy data */
	    }
	break;
      case SENDCMD:          /* not currently used */
	if (type== PACK)
	    {
	    state= INIT;
	    }
	break;
      case SENDQUIT:
	if (type== PACK)
	    {
	    state= STOP;
	    as_blk(PQUIT,"");
	    printf("File transmitted. Result OK!\n");
	    bellup();  /* cellibrate */
	    }
	  else
	    as_blk(PEOF,"");
	break;
      case STOP:
	if (type== PACK)
	    {
	    if (mlen>1)
		printf("%s\n", &rblk[1]);   /* message from DT08/RECMOD */
	      else printf("RECMOD terminated!\n");
	    ready= 1;
	    }
	  else
	    as_blk(PQUIT,"");
      } /* end switch(state) */
    } while (!ready);
  t2 = time(0);
  printf("SENDMOD 1.2 ready\n");
  printf("Elapsed time %d\n", (int) (t2 - t1));
  wr_st("reboot\r");
  pexit(port);
  }
