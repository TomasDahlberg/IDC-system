* traphand.a  1993-08-30 TD,  version 1.33
*
* This file contains proprietary information of IVT Electronic AB.
* Copying or reproduction without prior written approval is prohibited.
*
* This file is furnished under a license agreement or nondisclosure
* agreement. The software may be used or copied only in accordance 
* with the terms of the agreement.
*
* In no event will IVT Electronic AB, be liable for any lost revenue or
* profits or other special, indirect and consequential damages, even if
* IVT has been advised of the possibility of such damages.
*
* IVT Electronic AB
* Box 996
* 191 29 Sollentuna
* Sweden
*

*
* traphand.a
* Copyright (C) 1991-1993 IVT Electronic AB.
*


          nam      Trap Handler
          ttl      collection of lcd-utilities in trap handling module
*
*   long errno, _mtop, _stbot;
*
          vsect
errno:    ds.l 1
_mtop:    ds.l 1
_stbot:   ds.l 1

flag:     ds.l 1
pc2:      ds.l 1
dr2:      ds.l 1
          ends

Edition   equ      11
Revision  equ      11
TrapLib   equ      11
Objct     equ      1
ReEnt     equ      128

Typ_Lang  equ      (TrapLib<<8)+Objct
Attr_Rev  equ      (ReEnt<<8)+Revision
          psect    traphand,Typ_Lang,Attr_Rev,Edition,0,TrapEnt
          dc.l     TrapInit
          dc.l     TrapTerm

          org     0
S.d0      do.l    1
S.a0      do.l    1
S.a6      do.l    1
S.func    do.w    1
S.vect    do.w    1
S.trapPc  do.l    1
S.pc      do.l    1

TrapEnt:  movem.l d0/a0,-(a7)               save d0, a0
          move.w  S.func(a7),d0             get trap no
          cmpi.w  #maxTrapNo,d0
          bcc.s   FuncErr                   illegal trap no < 0 or > MAX_TRAP_NO
          lea     BranchT(pc),a0            a0 point to jump table
          asl.w   #1,d0                     d0 is word offset in table
          move.w  (a0,d0.w),d0              get value from that entry
          lea.l   (a0,d0.w),a0              add base, get address to routine
          move.l  a0,S.trapPc(a7)           replace with jump table value
          tst.l   flag(a6)                  if msb set, 
          bmi.s   icp_call                  someone already using me
          move.l  S.pc(a7),_mtop(a6)        save callers PC
          move.l  S.a6(a7),_stbot(a6)       save callers data base register
          lea.l   retAddr1(pc),a0           a0 := routine for restoring a6
          bra.s   saved
icp_call  move.l  S.pc(a7),pc2(a6)          save callers PC and data base reg
          move.l  S.a6(a7),dr2(a6)          at other location
          lea.l   retAddr2(pc),a0           a0 := routine for restoring a6
saved     move.l  a0,S.pc(a7)               After 
          movem.l (a7)+,d0/a0               Restore d0,a0
          addq.l  #8,a7                     Skip basereg, func# & vector# trap
          clr.l   errno(a6)                 No error
          rts                               Jump to address in jump table

TrapInit  movem.l  (a7)+,a6-a7
          clr.l   flag(a6)                  next will use _mtop
          rts

FuncErr   movem.l (a7)+,d0/a0/a6
          addq.l  #8,a7
          rts

*
* return from trap routines by normal called function
*
retAddr1  move.l  _mtop(a6),-(a7)           Push callers PC
*
* should pass errno to calling module, but for now we skip it
*
          movea.l _stbot(a6),a6             Restore data base register
          clr.l   flag(a6)
          rts                               Resume execution after callers call

*
* return from trap routines by icp called function
*
retAddr2  move.l  pc2(a6),-(a7)             Push callers PC
*
* should pass errno to calling module, but for now we skip it
*
          movea.l dr2(a6),a6                Restore data base register
          rts                               Resume execution after callers call

TrapTerm  os9     F$Exit

*
* Jump table:
*
*
jump      MACRO
          dc.w    \1-BranchT
          ENDM

BranchT   jump    lcdwr
	  jump    lcdwrite
	  jump    lcdpositRel
	  jump    lcdputs
	  jump    lcdinit
	  jump    lcdprintf
	  jump    lcdhome
	  jump    lcdpos
	  jump    led
	  jump    flashLed
	  jump    keyDown
	  jump    key
	  jump    getKey
	  jump    lcddefine
	  jump    lcdcld
	  jump    lcdcld_through_cache
	  jump    lcdsetWrap
	  jump    lcdsetCache
	  jump    lcdsetCacheCursor
          jump    lcdcursorOn
          jump    lcdcursorOff
          jump    updateLed
          jump    lcdcontrol
          jump    get_ad
          jump    put_da
          jump    get_di
          jump    put_do
          jump    lcdshowdirections
          jump    get_batt_voltage
          jump    opto_power
          jump    get_di_SR
          jump    lcdSetSelect
*          jump    ptrprintf
          jump    lcdclearCheckMap
          jump    lcdflushCheckMap

          jump    get_pulse
          jump    get_pi
          jump    get_pi_byte
          jump    pi_uptime
          jump    pi_measure
          jump    sinc_uptime
          jump    get_version
          jump    setCode
          jump    get_avail_nodes
          jump    snpk_uptime
          jump    snpk_version
          jump    get_snpk_pass
          jump    clearCode
          jump    clearAllCodes
          jump    getCode
          jump    lcdSetScreenContext
          jump    keyWasDown
          jump    getSNPKStatus
          jump    setSafeCode
          jump    lcdGetScreen
          jump    lcdPutScreen
          jump    makeSNPKrelay

          jump    bypassSNPKrelay
          jump    blockSNPKkeyboard
          jump    setAlarmSNPK
          jump    getAlarmSNPK
          jump    getPhyioError
          jump    PT100_Res

maxTrapNo equ     (*-BranchT)/2
  
          ends
  
  
 
