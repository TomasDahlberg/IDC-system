* traphand.a  1993-09-22 TD,  version 1.00
*
* This file contains proprietary information of IVT Electronic AB.
* Copying or reproduction without prior written approval is prohibited.
*
* This file is furnished under a license agreement or nondisclosure
* agreement. The software may be used or copied only in accordance 
* with the terms of the agreement.
*
* In no event will IVT Electronic AB, be liable for any lost revenue or
* profits or other special, indirect and consequential damages, even if
* IVT has been advised of the possibility of such damages.
*
* IVT Electronic AB
* Heimdalsgatan 4
* 113 28 Stockholm
* Sweden
*

*
* traphand.a
* Copyright (C) 1993 IVT Electronic AB.
*


          nam      Trap Handler
          ttl      collection of idc-utilities in trap handling module
*
*
*   traphand.a    - trap handler interface for idcutil trap module
*
*   history:
*   date       by  rev  ed#  what
*   ---------- --- ---  ---  ------------------------------------
*   1993-09-22 td  1.00   1  initial coding
*
Edition   equ      1
Revision  equ      1
TrapLib   equ      11
Objct     equ      1
ReEnt     equ      160
*
*   long errno, _mtop, _stbot;
*
          vsect
errno:    ds.l 1
_mtop:    ds.l 1
_stbot:   ds.l 1
          ends

Typ_Lang  equ      (TrapLib<<8)+Objct
Attr_Rev  equ      (ReEnt<<8)+Revision
          psect    traphand,Typ_Lang,Attr_Rev,Edition,0,TrapEnt
          dc.l     TrapInit
          dc.l     TrapTerm

          org     0
S.d0      do.l    1
S.a0      do.l    1
S.a6      do.l    1
S.func    do.w    1
S.vect    do.w    1
S.trapPc  do.l    1
S.pc      do.l    1
S.X       do.l    1

TrapEnt:  movem.l d0/a0,-(a7)               save d0, a0
          move.w  S.func(a7),d0             get trap no
          cmpi.w  #maxTrapNo,d0
          bcc.s   FuncErr                   illegal trap no < 0 or > MAX_TRAP_NO
          lea     BranchT(pc),a0            a0 point to jump table
          asl.w   #1,d0                     d0 is word offset in table
          move.w  (a0,d0.w),d0              get value from that entry
*
* Next 2 lines are new as of 920318
*
          andi.l  #$0000ffff,d0
          lea.l   (a0,d0.l),a0              add base, get address to routine
*
* instead of next line
*          lea.l   (a0,d0.w),a0              add base, get address to routine
*
*          move.l  a0,S.trapPc(a7)           replace with jump table value

          move.l  8(a7),_stbot(a6)          Save callers data base registerr
          move.l  a0,8(a7)                  replace with jump table value

          lea.l   retAddr(pc),a0            a0 := routine for restoring a6
          move.l  a0,12(a7)                 After 

          movem.l (a7)+,d0/a0               Restore d0,a0
          clr.l   errno(a6)                 No error
          rts                               Jump to address in jump table


TrapInit  movem.l  (a7)+,a6-a7
          rts

FuncErr   movem.l (a7)+,d0/a0/a6-a7
*          addq.l  #8,a7

	moveq	#19,d0

          rts

retAddr	  
	  rts

   move.l  _mtop(a6),-(a7)           Push callers PC
*
* should pass errno to calling module, but for now we skip it
*
          movea.l _stbot(a6),a6             Restore data base register
no_impl_yet
          rts                               Resume execution after callers call

TrapTerm  os9     F$Exit

*
* Jump table:
*
*
jump      MACRO
          dc.w    \1-BranchT
          ENDM

BranchT   jump    rs232_DTR
          jump    verify
          jump    reboot
          jump    wait_us
          jump    chexpmem

maxTrapNo equ     (*-BranchT)/2

obsolete
          rts                               Resume execution after callers call

          ends
  
  
 

