type     set      (1<<8)+1 
revs     set      (128<<8)+1


 use defsfile

         psect    v,type,revs,2,256,main

PORT	equ	$340010

* 82C684 register offsets (from device BASE address)

EXARIp set $0d input port

* 82C684 register offset (for each SIDE of the device)

EXARMode equ 0 mode register
EXARBdSt equ 1 baudrate/status register

EXAROffs equ (EXARBdSt-EXARMode)*8 subdevice addressing range
EXARSubs equ 4 nr of subdevices in the chip

* +----------------------------------------+
* |Nod 122.0, Batt=3670mV, (no-ipl-string!)|
* |930927 13:45 Laddar IDCsystem 1.894...  |
* +----------------------------------------+

nod	dc.b	"Nod ",0
batt	dc.b	" Batt=",0
mV	dc.b	"mV, ",0
noipl	dc.b	"(no-ipl-string!)",0
ladda	dc.b	"Laddar IDCsystem ",0
more	dc.b	"...",0

main:
	bsr.s	cld
	lea.l	nod(pc),a0
	bsr.s	emit			"Nod "
	bsr	NetId			get master.slave id
	move.l	d0,-(sp)		push slave number
	move.l	d1,d0			d0 is master number
	bsr.s	i2ascii			write digits
	moveq.l #'.',d0
	bsr.s	emitChar
	move.l	(sp)+,d0		pop slave number
	bsr.s	i2ascii			write digits
	lea.l	batt(pc),a0
	bsr.s	emit
	bsr	getBatt
	bsr.s	i2ascii
	lea.l	mV(pc),a0
	bsr.s	emit
	bsr.s	checkIpl
	bcs.s	noIpl
	lea.l	noipl(pc),a0
	bsr.s	emit
noIpl
	bsr.s	carriageReturn
*
*	bsr.s	getTime
*	
*	
	lea.l	ladda(pc),a0
	bsr.s	emit
	movea.l	#$3fffd8,a0
	move.l	#4,d1
lnex	move.b	(a0)+,d0
	bsr.s	emitChar
	dbne	d1,lnex
	lea.l	more(pc),a0
	bsr.s	emit
        os9	F$Exit


emit	move.b	(a0)+,d0	get next char
	beq.s	nej
	lcdput
	bra.s	emit
nej	rts

emitChar
	lcdput
	rts

cld	lcdgo
	rts

checkIpl
	rts

carriageReturn
	
	rts

i2ascii
         move.w   #1000,d1
         bsr.s    tal
         move.w   #100,d1
         bsr.s    tal
         move.w   #10,d1
         bsr.s    tal
         move.w   #1,d1
         moveq    #1,d3	       920513, telling we have started, if not before
         bsr.s    tal
	rts
	 
*
*     d0	in argument to display
*     d1        what exponetial to display
*     d2        temporary storage of figure
*     d3        static flag, 1= we have started
*     a0        temporary pointer to stack, where figure is temp. stored
*
tal      moveq    #0,d2		   write this figure, if needed
         cmp.w    d1,d0
         bcs.s    notyet
         divu.w   d1,d0		   d0:= d0/d1
         move.b   d0,d2		   get lower (16bits) == quotient
         swap.w   d0               make lower 16bits == remainder
         andi.l   #$ffff,d0
         moveq    #1,d3	           flag, telling we have started
*
*        now, just write the figure in d2 and return
*        
notyet   tst.b    d3
         beq.s    noprint
         addi.b   #48,d2
         move.b   d2,(a7)
         move.l   d0,-(a7)
	 move.b	  d2,d0
	 bsr.s	  emitChar
         move.l   (a7)+,d0
noprint	 rts

*
* function: reads the dip-switch
* returns   d0 slave node number, d1 master node number
* destroys  d0,d1,a0
*
NetId move.l #PORT,d0 get device port
 andi.b #256-EXARSubs*EXAROffs,d0 remove lsb bits
 movea.l d0,a0 set pointer to the chip
 move.b EXARIp(a0),d0 get input byte 1
 move.b EXARIp+EXAROffs*2(a0),d1 get input byte 2
 lsr.w #4,d0 shift DIP1-4 into b0..b3
 andi.w #$000F,d0 keep b0..b3
 btst #1,d1 is DIP10 set?
 beq.s NetId1 no...
 bset #9,d0 set b9
NetId1 asl.w #1,d1 shift DIP5-9 into b4..b8
 andi.w #$01F0,d1 keep b4..b8
 or.w d1,d0 add bits to d0
*  
* added 921111, if bit9 replace with 0
*
 moveq.l #0,d1			default master 0
 btst #9,d0
 beq.s nomaster
 move.l  d0,d1
 moveq.l #0,d0			master if msb (b9) was set
nomaster
 rts

*
* function: reads the battery voltage
* returns:  d0 in mV
* destroys: d0,a0
*
getBatt
	move.l  #3573,d0
	rts


