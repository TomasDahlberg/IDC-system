 nam TickGeneric.a
 ttl Generic ticker driver for OS9/68K

********************
* Generic ticker driver

* Copyright 1987, 1988 by Microware Systems Corporation
* Reproduced Under License

* This source code is the proprietary confidential property of
* Microware Systems Corporation, and is provided to licensee
* solely for documentation and educational purposes. Reproduction,
* publication, or distribution in any form to any party other than
* the licensee is strictly prohibited.

******************************************************
* Edition History
*
*  #    Date      Comments                                  By
* -- -------- --------------------------------------------- ---
* 00 87/08/06 First hacked into shape                       jal
* 00 87/09/11 Altered to call StartTick as subroutine       jal
* 01 87/09/11 Changed to attempt link at runtime to         jal
*             "rtclock" module for setting or reading a
*             real time clock device
* 01 87/09/14 Changed label names for tick device to avoid  jal
*             name clashes
* 01 87/09/16 Masked IRQs at beginning of Init routine      jal
* 02 87/10/27 Added F$UnLink call for "rtclock" module to   jal
*             avoid racking up the link count
* 02 87/10/27 Added "SetTime" and "GetTime" labels for      jal
*             calling the subroutines in the "rtclock" module
* 03 87/10/27 Removed interrupt masking code; rewrote exits jal
*             to do the F$UnLink call inline (if needed)
*             (the Unlink subroutine has been deleted)
* 04 87/10/30 Rewrote exits to merge them and adjusted the  jal
*             stack operations; no longer saving d0
* 04 87/10/30 Added E$NoClk error code in NoRTC error exit  jal
* 05 87/11/24 Added a2,a6 preservation around Set/Getime    jal
* 06 87/11/25 Added error abort if StartTick returns error. wwb
*             Added StackFrame tracking.
*             Moved "rtclock" name string to 'before code'.
* 07 88/06/02 fixed testing for "was time passed".          wwb
*             <<<---- OS-9/68000 V2.3 Release ---->>>
*
Edition	equ	7
Revision equ 0

Type_Lang set (Systm<<8)!Objct
Attr_Rev set ((ReEnt+SupStat)<<8)!Revision

 psect Clock,Type_Lang,Attr_Rev,Edition,0,TickInit

 use ..\defs\oskdefs.d
 use ..\defs\systype.d
 use ..\defs\os9svc.m
  

********************************
* Expected variables and constants:
* 
* The following variables and constants must be defined
* by the hardware specific tick driver file:
*
* TiksPerSec - (Ticks Per Second) - Pretty self-explanatory.
* ClockVect - clock vector
* ClockPrior - clock priority
*
* NOTE: These should be for the ticker device,
*       not the RTC! (unless they're the same device.)


********************
* RTC module name
*
ClockName dc.b "rtc",0 name of real time clock module

DELAY macro
  exg d0,d1
  exg d0,d1
  endm

********************
* Offsets in "rtclock" module for subroutine calls
*
GetTime equ 0 get-time is at module entry point
SetTime equ 4 set-time is next entry

 page
********************************
* TickInit: Intialization routine
*
* Passed: (a5) = Address of caller's registers stack
*         (a6) = System Global Data Pointer
*
TickInit:
 move sr,-(sp) save the condition codes
 movem.l d1/a0-a3,-(sp) save the registers
StackFrame set 4*5 set level of stacking
 suba.l a2,a2 clear a2 for later use in link detection
 tst.w D_TckSec(a6) is clock already running?
 bne.s SkipTick if yes, skip ticker initialization
 move.w #TicksSec,D_TckSec(a6) set systems tick rate

 move.w #TicksSec,$774(a6) 	???????????
*
* Put the Ticker in the polling table
*
ClockPort	set $340000
ClockVect	set $1e
ClockPrior	set $001

 movea.l #ClockPort,a3 get the ticker address
 move.l #ClockVect,d0 get vector number
 move.l #ClockPrior,d1 get priority
 lea TickIRQ(pc),a0 get address of service routine
 os9 F$IRQ put ticker in polling table
 bcs.s ErrExit if error on F$IRQ call, exit
*
* Initialize ticker chip and enable it for tick IRQs
*
 move.b	#$70,$4(a3)		ACR, set up timer mode with source CLK/16
 DELAY
 move.w	#$480,$6(a3)		CTUR & CTLR, timer value is 1152 dec
 DELAY
 move.b $f(a3),d1		sync timer
 DELAY
 move.b #$0a,5(a3)		IMR1, int on timer ready,
* bsr StartTick initialize the ticker chip
* bcs.s ErrExit ..abort if error
*
* Link to real time clock module ("rtclock")
*
SkipTick move.w #(Sbrtn<<8)+Objct,d0 set RTC type/language
 lea ClockName(pc),a0 get address of clock module name
 OS9 F$Link try to link to the clock module (alters a1,a2)
 bcc.s RTCFound if link succeeds, go call RTC subroutine
*
* no rtclock module was found
*

 tst.w R$d1+2(a5) was date info passed ?
 bne.s Exit if yes, go exit with no error
 move.w #E$NoClk,d1 get "No Clock" error code
 bra.s ErrExit exit with no clock error
*
* Determine if SetTime or GetTime
* (a1 = address of subroutine jump table)
*
RTCFound movem.l a2/a6,-(sp) save the regs
StackFrame set StackFrame+(2*4) track stacking
FrameSave set StackFrame extra copy

 tst.w R$d1+2(a5) was date info passed ?

 bne.s Setime if yes, go set time in RTC chip
*
* Get the time from the RTC
*
 jsr GetTime(a1) get the time from the RTC
 movem.l (sp)+,a2/a6 retrieve the regs
StackFrame set StackFrame-(2*4) track stacking
 bcs.s ErrExit exit with error (if any)
 move.l d1,D_Year(a6) set system gregorian date
 OS9 F$Julian convert to julian date
 move.l d1,D_Julian(a6) set julian date
 neg.l d0
 add.l #24*60*60,d0 convert to seconds until midnight
 move.l d0,D_Second(a6) set julian time
 bra.s Exit exit with no error 
*
* Set the time in the RTC
*
StackFrame set FrameSave reset stack tracking
Setime movem.l R$d0(a5),d0-d1 get time/date data
 jsr SetTime(a1) set the time in the RTC
 movem.l (sp)+,a2/a6 retrieve the regs
StackFrame set StackFrame-(2*4) track stacking
 bcc.s Exit go exit with no error (if no error)
 
 page
 
********************
* Error exit
*
ErrExit move.l d1,(sp) put error code in d1 (on the stack)
 ori.w #Carry,StackFrame(sp) return carry set (in ccr on the stack)
*
* Exit
*
Exit move.l a2,d0 was a valid link made?
 beq.s Exit10 if no, skip the unlink call
 OS9svc F$UnLink unlink the RTC module (ignore any error)
Exit10 movem.l (sp)+,d1/a0-a3
StackFrame set StackFrame-(4*5)
 ifne StackFrame
 fail Stack level imbalance
 endc
 rtr

next
 ori.b	#Carry,ccr
 rts
 
TickIRQ
 btst	#3,5(a3)
 beq.s	next
 move.b $f(a3),d0
 move.l $24(a6),a0
 jmp	(a0)

 ends
